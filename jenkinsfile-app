pipeline {

    agent none

    tools {
        dockerTool 'docker'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xtrem')
    }

    environment {
        APP_DIR = 'application/app/'
    }

    stages {

        stage('Build') { 
            agent {
                docker {
                    image 'python:3.9-alpine' 
                }
            }
            steps {
                dir(APP_DIR) {
                    sh 'python -m py_compile config.py app.py test_start.py' 
                    stash(name: 'compiled-results', includes: '*.py*') 
                }
            }
        }

        stage('Test') { 
            agent {
                docker {
                    image 'roomich13/pytest:v3' 
                }
            }
            steps {
                dir(APP_DIR) {
                    sh 'pytest test_start.py' 
                }
            }
        }

        stage('Deliver') { 
            agent any
            environment { 
                VOLUME = '$(pwd)/${APP_DIR}:/app'
                IMAGE = 'roomich13/pytest:v3'
            }
            steps {
                dir(path: env.BUILD_ID) { 
                    unstash(name: 'compiled-results') 
                    // sh "docker run --rm -v ${VOLUME} -i ${IMAGE} pyinstaller --copy-metadata magic_filter -F ./app.py"
                    sh "docker run --rm -v ${VOLUME} -i ${IMAGE} pyinstaller --copy-metadata magic_filter -F /app/app.py"
                }
            }
            post {
                success {
                    archiveArtifacts "${env.BUILD_ID}/${APP_DIR}/dist/app" 
                    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"
                }
            }
        }
    }
}